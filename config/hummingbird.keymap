/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 23 24 25 29 28 27 26>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <4 3 2 1 0 10 11 12 13 14 22 21 20 26 27 28 29>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hroa: hroa {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&open_angle_quote>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 23 24 25 29 28 27 26>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            label = "HROA";
        };

        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 23 24 25 29 28 27 26>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            label = "HRL";
        };

        f_hml: f_hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 23 24 25 29 28 27 26>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            label = "F_HML";
        };

        f_hmr: f_hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <4 3 2 1 0 10 11 12 13 14 22 21 20 26 27 28 29>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            label = "F_HMR";
        };

        caps_enter: caps_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_ENTER";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT ENTER>, <&kp CAPSLOCK>;

            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cb_z {
            bindings = <&kp Z>;
            key-positions = <11 20>;
        };

        cb_b {
            bindings = <&kp B>;
            key-positions = <13 22>;
        };

        cb_dot {
            bindings = <&kp N>;
            key-positions = <16 23>;
        };

        cb_k {
            bindings = <&kp SLASH>;
            key-positions = <18 25>;
        };

        cz {
            bindings = <&kp RA(Z)>;
            key-positions = <20 21>;
        };

        cb {
            bindings = <&kp RA(B)>;
            key-positions = <22 21>;
        };

        cdot {
            bindings = <&kp RA(N)>;
            key-positions = <23 24>;
        };

        ck {
            bindings = <&kp RA(SLASH)>;
            key-positions = <25 24>;
        };

        studio_unlock {
            bindings = <&studio_unlock>;
            key-positions = <26 27 28 29>;
        };

        fast_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <12 11>;
            require-prior-idle-ms = <100>;
            timeout-ms = <15>;
        };

        fast_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            require-prior-idle-ms = <100>;
            timeout-ms = <15>;
        };

        fast_enter {
            bindings = <&kp ENTER>;
            key-positions = <18 17>;
            require-prior-idle-ms = <100>;
            timeout-ms = <15>;
        };

        fast_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 16>;
            require-prior-idle-ms = <100>;
            timeout-ms = <15>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <26 27>;
        };
    };

    macros {
        open_angle_quote: open_angle_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2) &kp LS(SPACE)>;
            label = "OPEN_ANGLE_QUOTE";
        };

        closed_angle_quote: closed_angle_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SPACE) &kp LS(NUMBER_3)>;
            label = "CLOSED_ANGLE_QUOTE";
        };

        tmux_H: tmux_H {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp RA(T)>;
            label = "TMUX_H";
        };

        tmux_V: tmux_V {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp RA(SEMICOLON)>;
            label = "TMUX_V";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R           &kp T          &kp Y           &kp U           &kp I         &kp O        &kp P
&hml LGUI A  &hml RALT S  &hml LCTRL D  &f_hml LSHFT F  &kp G          &kp H           &f_hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMICOLON
             &kp X        &kp C         &kp V                                          &kp M           &kp COMMA     &kp DOT
                                        &mo 2           &lt 1 SPACE    &kp LEFT_SHIFT  &kp RIGHT_ALT
            >;
        };

        nav_layer {
            display-name = "Nav";
            bindings = <
&none      &kp LC(C)     &none              &none                &none    &none          &kp HOME  &kp UP_ARROW    &kp PAGE_UP    &kp PRINTSCREEN
&kp LC(A)  &kp LEFT_ALT  &hml LCTRL ESCAPE  &hmr LEFT_SHIFT TAB  &none    &none          &kp DOWN  &kp DOWN_ARROW  &kp RIGHT      &kp CAPS
           &kp LC(X)     &none              &kp LC(V)                                    &kp END   &none           &kp PAGE_DOWN
                                            &none                &none    &kp BACKSPACE  &mo 3
            >;
        };

        num_layer {
            display-name = "NUMERIC";
            bindings = <
&none         &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &none         &none  &none        &none            &none            &none
&kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_DOT    &none  &kp KP_PLUS  &kp KP_SUBTRACT  &kp KP_MULTIPLY  &kp KP_DIVIDE
              &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6                       &none        &none            &none
                                          &none         &none         &none  &none
            >;
        };

        Media {
            display-name = "Media";
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5     &kp F6  &kp F7             &kp F8      &kp F9           &kp F10
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15    &none   &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP  &none
         &none    &none    &none                       &none              &none       &none
                           &none    &none      &none   &none
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans          &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans           &trans
&trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP     &mmv MOVE_RIGHT  &mkp MCLK
        &trans  &trans  &trans                            &msc SCRL_DOWN  &msc SCRL_UP     &trans
                        &trans  &trans    &mkp RCLK       &mkp LCLK
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        MediaLayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
